/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:8080/api";
    }

    hello(): Promise<void> {
        let url_ = this.baseUrl + "/root/hello";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processHello(_response);
        });
    }

    protected processHello(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class UserClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:8080/api";
    }

    register(registerVm: RegisterVm): Promise<UserVm> {
        let url_ = this.baseUrl + "/user/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(registerVm);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: AxiosResponse): Promise<UserVm> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = resultData201 ? UserVm.fromJS(resultData201) : new UserVm();
            return result201;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ApiException.fromJS(resultData400) : new ApiException();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserVm>(<any>null);
    }

    login(loginVm: LoginVm): Promise<LoginResponseVm> {
        let url_ = this.baseUrl + "/user/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(loginVm);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<LoginResponseVm> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = resultData201 ? LoginResponseVm.fromJS(resultData201) : new LoginResponseVm();
            return result201;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ApiException.fromJS(resultData400) : new ApiException();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LoginResponseVm>(<any>null);
    }
}

export class TodoClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:8080/api";
    }

    create(todoParams: TodoParams): Promise<TodoVm> {
        let url_ = this.baseUrl + "/todos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(todoParams);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<TodoVm> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = resultData201 ? TodoVm.fromJS(resultData201) : new TodoVm();
            return result201;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ApiException.fromJS(resultData400) : new ApiException();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TodoVm>(<any>null);
    }

    getall(isCompleted?: boolean | null | undefined, level?: Level[] | null | undefined): Promise<TodoVm[]> {
        let url_ = this.baseUrl + "/todos?";
        if (isCompleted !== undefined)
            url_ += "isCompleted=" + encodeURIComponent("" + isCompleted) + "&"; 
        if (level !== undefined)
            level && level.forEach(item => { url_ += "level=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetall(_response);
        });
    }

    protected processGetall(response: AxiosResponse): Promise<TodoVm[]> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TodoVm.fromJS(item));
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ApiException.fromJS(resultData400) : new ApiException();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TodoVm[]>(<any>null);
    }

    update(todoVm: TodoVm): Promise<TodoVm> {
        let url_ = this.baseUrl + "/todos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(todoVm);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<TodoVm> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? TodoVm.fromJS(resultData200) : new TodoVm();
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ApiException.fromJS(resultData400) : new ApiException();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TodoVm>(<any>null);
    }

    delete(id: string): Promise<TodoVm> {
        let url_ = this.baseUrl + "/todos/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<TodoVm> {
        const status = response.status;
        let _headers: any = {}; 
        if (response.headers && response.headers.forEach) { 
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? TodoVm.fromJS(resultData200) : new TodoVm();
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ApiException.fromJS(resultData400) : new ApiException();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TodoVm>(<any>null);
    }
}

export class RegisterVm implements IRegisterVm {
    username!: string;
    password!: string;
    firstName?: string | null;
    lastName?: string | null;

    constructor(data?: IRegisterVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.username = data["username"] !== undefined ? data["username"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : <any>null;
        }
    }

    static fromJS(data: any): RegisterVm {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        return data; 
    }
}

export interface IRegisterVm {
    username: string;
    password: string;
    firstName?: string | null;
    lastName?: string | null;
}

export class UserVm implements IUserVm {
    createdAt?: Date | null;
    updatedAt?: Date | null;
    id?: string | null;
    username!: string;
    firstName?: string | null;
    lastName?: string | null;
    fullName?: string | null;
    role?: UserVmRole | null;

    constructor(data?: IUserVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.createdAt = data["createdAt"] ? new Date(data["createdAt"].toString()) : <any>null;
            this.updatedAt = data["updatedAt"] ? new Date(data["updatedAt"].toString()) : <any>null;
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.username = data["username"] !== undefined ? data["username"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : <any>null;
            this.fullName = data["fullName"] !== undefined ? data["fullName"] : <any>null;
            this.role = data["role"] !== undefined ? data["role"] : <any>null;
        }
    }

    static fromJS(data: any): UserVm {
        data = typeof data === 'object' ? data : {};
        let result = new UserVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["role"] = this.role !== undefined ? this.role : <any>null;
        return data; 
    }
}

export interface IUserVm {
    createdAt?: Date | null;
    updatedAt?: Date | null;
    id?: string | null;
    username: string;
    firstName?: string | null;
    lastName?: string | null;
    fullName?: string | null;
    role?: UserVmRole | null;
}

export class ApiException implements IApiException {
    statusCode?: number | null;
    message?: string | null;
    status?: string | null;
    error?: string | null;
    errors?: any | null;
    timestamp?: string | null;
    path?: string | null;

    constructor(data?: IApiException) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.statusCode = data["statusCode"] !== undefined ? data["statusCode"] : <any>null;
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.status = data["status"] !== undefined ? data["status"] : <any>null;
            this.error = data["error"] !== undefined ? data["error"] : <any>null;
            this.errors = data["errors"] !== undefined ? data["errors"] : <any>null;
            this.timestamp = data["timestamp"] !== undefined ? data["timestamp"] : <any>null;
            this.path = data["path"] !== undefined ? data["path"] : <any>null;
        }
    }

    static fromJS(data: any): ApiException {
        data = typeof data === 'object' ? data : {};
        let result = new ApiException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusCode"] = this.statusCode !== undefined ? this.statusCode : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["error"] = this.error !== undefined ? this.error : <any>null;
        data["errors"] = this.errors !== undefined ? this.errors : <any>null;
        data["timestamp"] = this.timestamp !== undefined ? this.timestamp : <any>null;
        data["path"] = this.path !== undefined ? this.path : <any>null;
        return data; 
    }
}

export interface IApiException {
    statusCode?: number | null;
    message?: string | null;
    status?: string | null;
    error?: string | null;
    errors?: any | null;
    timestamp?: string | null;
    path?: string | null;
}

export class LoginVm implements ILoginVm {
    username!: string;
    password!: string;

    constructor(data?: ILoginVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.username = data["username"] !== undefined ? data["username"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
        }
    }

    static fromJS(data: any): LoginVm {
        data = typeof data === 'object' ? data : {};
        let result = new LoginVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data; 
    }
}

export interface ILoginVm {
    username: string;
    password: string;
}

export class LoginResponseVm implements ILoginResponseVm {
    token!: string;
    user!: UserVm;

    constructor(data?: ILoginResponseVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.user = new UserVm();
        }
    }

    init(data?: any) {
        if (data) {
            this.token = data["token"] !== undefined ? data["token"] : <any>null;
            this.user = data["user"] ? UserVm.fromJS(data["user"]) : new UserVm();
        }
    }

    static fromJS(data: any): LoginResponseVm {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResponseVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token !== undefined ? this.token : <any>null;
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        return data; 
    }
}

export interface ILoginResponseVm {
    token: string;
    user: UserVm;
}

export class TodoParams implements ITodoParams {
    content!: string;
    level?: TodoParamsLevel | null;

    constructor(data?: ITodoParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
            this.level = data["level"] !== undefined ? data["level"] : <any>null;
        }
    }

    static fromJS(data: any): TodoParams {
        data = typeof data === 'object' ? data : {};
        let result = new TodoParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content !== undefined ? this.content : <any>null;
        data["level"] = this.level !== undefined ? this.level : <any>null;
        return data; 
    }
}

export interface ITodoParams {
    content: string;
    level?: TodoParamsLevel | null;
}

export class TodoVm implements ITodoVm {
    createdAt?: Date | null;
    updatedAt?: Date | null;
    id?: string | null;
    content!: string;
    level!: TodoVmLevel;
    isCompleted!: boolean;

    constructor(data?: ITodoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.createdAt = data["createdAt"] ? new Date(data["createdAt"].toString()) : <any>null;
            this.updatedAt = data["updatedAt"] ? new Date(data["updatedAt"].toString()) : <any>null;
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.content = data["content"] !== undefined ? data["content"] : <any>null;
            this.level = data["level"] !== undefined ? data["level"] : <any>null;
            this.isCompleted = data["isCompleted"] !== undefined ? data["isCompleted"] : <any>null;
        }
    }

    static fromJS(data: any): TodoVm {
        data = typeof data === 'object' ? data : {};
        let result = new TodoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        data["level"] = this.level !== undefined ? this.level : <any>null;
        data["isCompleted"] = this.isCompleted !== undefined ? this.isCompleted : <any>null;
        return data; 
    }
}

export interface ITodoVm {
    createdAt?: Date | null;
    updatedAt?: Date | null;
    id?: string | null;
    content: string;
    level: TodoVmLevel;
    isCompleted: boolean;
}

export enum Level {
    Low = "Low", 
    Normal = "Normal", 
    High = "High", 
}

export enum UserVmRole {
    Admin = "Admin", 
    User = "User", 
}

export enum TodoParamsLevel {
    Low = "Low", 
    Normal = "Normal", 
    High = "High", 
}

export enum TodoVmLevel {
    Low = "Low", 
    Normal = "Normal", 
    High = "High", 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}